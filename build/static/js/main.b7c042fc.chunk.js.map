{"version":3,"sources":["components/ButtonPanel.module.css","components/Display.module.css","components/Display.js","components/Buttons.js","components/ButtonPanel.js","logic/operate.js","logic/calculate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","text","className","style","display__container","display__text","Buttons","buttonName","handleClick","onClick","ButtonPanel","clickHandler","name","props","row","this","Component","operate","one","two","operator","result","num1","parseFloat","num2","console","log","calculate","obj","next","total","operation","isNaN","includes","toString","outcome","finalReturn","App","setState","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7c042fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"ButtonPanel_row__3_aj-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display__container\":\"Display_display__container__1MBRC\",\"display__text\":\"Display_display__text__mJgS3\"};","import React from 'react'\r\nimport style from './Display.module.css';\r\nfunction Display({text}) {\r\n    return (\r\n        <div className={style.display__container}>\r\n            <div className={style.display__text}>{text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display\r\n\r\n","import React from 'react'\r\nimport style from './Buttons.module.css';\r\nfunction Buttons({buttonName, handleClick}) {\r\n\r\n    const clickHandler = () => {\r\n        handleClick(buttonName);\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={clickHandler}>{buttonName}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons\r\n","import React, { Component } from 'react'\r\nimport Buttons from './Buttons'\r\nimport style from './ButtonPanel.module.css'\r\nclass ButtonPanel extends Component {\r\n\r\n    clickHandler = (name) =>{\r\n        this.props.handleClick(name)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className={style.row}>\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"AC\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"+/-\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"%\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"รท\"} />\r\n                </div>\r\n                <div className={style.row}>\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"7\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"8\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"9\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"x\"} />\r\n                </div>\r\n                <div className={style.row}>\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"4\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"5\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"6\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"-\"} />\r\n                </div>\r\n                <div className={style.row}>\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"1\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"2\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"3\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={'+'} />\r\n                </div>\r\n                <div className={style.row}>\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"0\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\".\"} />\r\n                    <Buttons handleClick={this.clickHandler} buttonName={\"=\"} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ButtonPanel\r\n","\r\nconst operate = (one, two, operator)=>{\r\n\r\n    let num1 = one ? parseFloat(one) : 0;\r\n    let num2 = two ? parseFloat(two) : operator === 'x' || operator === 'รท' ? 1: 0;\r\n    \r\n    let result;\r\n    console.log(`num1: ${num1},  num2: ${num2}, operator: ${operator}`);\r\n\r\n    if(operator === '+'){ \r\n        result = num1 + num2;\r\n    }\r\n\r\n    if(operator === '-'){\r\n        result = num1 - num2;\r\n    }\r\n\r\n    if(operator === 'x'){\r\n        result = num1 * num2;\r\n    }\r\n\r\n    if(operator === 'รท'){\r\n        result = num1 / num2;\r\n    }\r\n\r\n    console.log(`result: ${result}`);\r\n    return result;\r\n}\r\n\r\nexport default operate;","import operate from './operate.js'\r\nconst calculate = function (obj, name) {\r\n\r\n    if (name === 'AC') {\r\n        return {\r\n            next: null,\r\n            total: null,\r\n            operation: null,\r\n        }\r\n    }\r\n\r\n    if (!isNaN(name)) {\r\n        if (obj.operation) {\r\n            if (obj.next) {\r\n                return {\r\n                    next: obj.next + name\r\n                }\r\n            }\r\n            return { next: name };\r\n        } else if (obj.next) {\r\n            return {\r\n                next: obj.next === '0' ? name : obj.next + name,\r\n                total: null\r\n            }\r\n        }\r\n\r\n        return {\r\n            next: name,\r\n            total: null\r\n        }\r\n    }\r\n\r\n    if (name === '.') {\r\n        if (obj.next) {\r\n            if (obj.next.includes('.')) { // if the number already has decimal then ignore\r\n                return {};\r\n            }\r\n            return {\r\n                next: obj.next + name\r\n            }\r\n        }\r\n\r\n        return { next: '0.' }\r\n    }\r\n\r\n    if (name === '=') {\r\n        // console.log(obj);\r\n        if (obj.operation && obj.next) {\r\n            return {\r\n                total: operate(obj.total, obj.next, obj.operation).toString(),\r\n                next: null,\r\n                operation: null,\r\n            }\r\n        }\r\n        else {\r\n            return {};\r\n        }\r\n    }\r\n\r\n    if (name === '+/-') {\r\n        if (obj.next) {\r\n            return {\r\n                next: -1 * parseFloat(obj.next)\r\n            }\r\n        }\r\n        if (obj.total) {\r\n            return {\r\n                total: -1 * parseFloat(obj.total)\r\n            }\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    if(name ==='%'){\r\n\r\n        if(obj.operation && obj.next){\r\n            const outcome = operate(obj.total, obj.next, obj.operation);\r\n            if(outcome){\r\n                outcome = parseFloat(outcome)\r\n                outcome = outcome/100;\r\n                return {\r\n                    total: outcome.toString(),\r\n                    next: null,\r\n                    operation: null\r\n                }\r\n                \r\n            }\r\n        }\r\n        if(obj.next){\r\n            return {\r\n                next: (obj.next/100).toString()\r\n            }\r\n        }\r\n        return {};\r\n\r\n    }\r\n\r\n    //operator pressed and one operation already active\r\n    if (obj.operation) {\r\n        return {\r\n            total: operate(obj.total, obj.next, obj.operation).toString(),\r\n            operation: name,\r\n            next: null\r\n        }\r\n    }\r\n\r\n    //user hasn't typed a number yet\r\n    if (!obj.next) {\r\n        return { operation: name };\r\n    }\r\n\r\n    let finalReturn = {\r\n        total: obj.next,\r\n        next: null,\r\n        operation: name\r\n    }\r\n    console.log(`final return `, finalReturn);\r\n    return finalReturn;\r\n}\r\n\r\nexport default calculate;","import './App.css';\r\nimport Display from './components/Display';\r\nimport ButtonPanel from './components/ButtonPanel';\r\nimport calculate from './logic/calculate.js'\r\nimport React, { Component } from 'react'\r\n\r\nexport class App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      total: null,\r\n      next: null,\r\n      operation: null\r\n    }\r\n\r\n  }\r\n\r\n  clickHandler = (name) => {\r\n    console.log(name);\r\n    this.setState(calculate(this.state, name))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Display text={this.state.next || this.state.total || \"0\"} />\r\n        <ButtonPanel handleClick={this.clickHandler} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}